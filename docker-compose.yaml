# Docker Compose Configuration for RealTimeDataPipeline
#
# This configuration file defines the services, networks, and volumes required to run the real-time data pipeline using Docker Compose.
#
# Key Features:
#   - Kafka Cluster: Sets up a Kafka cluster using Zookeeper and Kafka services.
#   - PostgreSQL Database: Configures a PostgreSQL database for storing consumed data.
#   - PGAdmin: Provides a web-based PostgreSQL management tool.
#   - Consumer & Producer: Sets up the consumer and producer services based on custom Dockerfiles.
#
# Environment Variables:
#   - POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB: Credentials and database name for PostgreSQL.
#   - PGADMIN_DEFAULT_EMAIL, PGADMIN_DEFAULT_PASSWORD: Default login credentials for PGAdmin.
#   - USERNAME_API, PASSWORD_API: Credentials for the external STOMP server (used in producer).
#
# Volumes:
#   - postgres-db-volume: Persists PostgreSQL data.
#   - zookeeper-data-volume: Persists Zookeeper data.
#   - kafka-data-volume: Persists Kafka data.
#
# Networks:
#   - kafka-network: A custom bridge network for inter-service communication.
#
# Author: Boyd Werkman
# Date: 8-8-2023

version: '3.8'

services:
  # Zookeeper service for managing the Kafka cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - kafka-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data-volume:/var/lib/zookeeper
 
  # Kafka service for message brokering
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data-volume:/var/lib/kafka/data
  
  # PostgreSQL database service
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - kafka-network
    ports:
    - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always
  
  # PGAdmin service for managing PostgreSQL database
  pgadmin: 
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - kafka-network
    ports:
      - "5050:80"
  
  # Consumer service that consumes messages from Kafka and stores them in PostgreSQL
  consumer:
    build:
      context: ./consumer
    networks:
      - kafka-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - kafka
      - postgres
    command: ["/wait-for-it.sh", "kafka:9092", "--", "/wait-for-it.sh", "postgres:5432", "--", "python", "consumer.py"]
  
  # Producer service that produces messages to Kafka based on data from an external API
  producer:
    build:
      context: ./producer
    networks:
      - kafka-network
    environment:
      - USERNAME_API=${USERNAME_API}
      - PASSWORD_API=${PASSWORD_API}
    depends_on:
      - kafka
    command: ["/wait-for-it.sh", "kafka:9092", "--", "python", "producer.py"]

# Named volumes for data persistence
volumes:
  postgres-db-volume:
  zookeeper-data-volume:
  kafka-data-volume:

# Custom bridge network for inter-service communication
networks:
  kafka-network:
    driver: bridge